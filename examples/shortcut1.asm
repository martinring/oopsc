MRI R1, 1
MRI R2, _stack
MRI R3, _objectStack
MRI R4, gcRunning
MRM R4, (R4)
JPC R4, gc_return_734
MRI R4, gcReturnAddress
MRI R5, gc_return_734
MMR (R4), R5
MRI R4, heapSpace
MRM R4, (R4)
MRI R5, 2
SUB R4, R5
ISN R4, R4
JPC R4, _garbageCollector
gc_return_734:
MRI R4, heapSpace
MRM R4, (R4)
MRI R5, 2
SUB R4, R5
ISN R4, R4
XOR R4, R1
JPC R4, skip_735
MRI R7, _outOfMemory
MRI R4, _error
MRR R0, R4
skip_735:
MRI R4, heapPointer
MRM R5, (R4)
MRI R6, Main
MMR (R5), R6
ADD R3, R1
MMR (R3), R5
MRI R6, 0
ADD R5, R1
MMR (R5), R6
ADD R5, R1
MMR (R5), R6
ADD R5, R1
MMR (R4), R5
MRI R4, heapSpace
MRI R5, heapSpace
MRM R5, (R5)
MRI R6, 4
SUB R5, R6
MMR (R4), R5
MRM R4, (R3)
JPC R4, skip_736
MRI R7, _nullPointer
MRI R4, _error
MRR R0, R4
skip_736:
ADD R2, R1
MRI R4, VarOrCall_737_return
MMR (R2), R4
MRR R4, R3
MRI R5, 0
SUB R4, R5
MRM R4, (R4)
MRM R4, (R4)
ADD R4, R1
MRM R4, (R4)
MRR R0, R4
VarOrCall_737_return:
MRI R4, _end
MRR R0, R4
Main:
DAT 1, Main__clone
DAT 1, Main_main
DAT 1, Main_a
Main__clone:
ADD R2, R1
MMR (R2), R4
MRR R4, R3
ADD R4, R1
MRI R5, 0
ADD R3, R1
MMR (R3), R5
ADD R2, R1
MRR R5, R4
MRI R6, -1
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
MRM R5, (R3)
JPC R5, skip_740
MRI R7, _nullPointer
MRI R5, _error
MRR R0, R5
skip_740:
ADD R2, R1
MRM R5, (R3)
SUB R3, R1
ADD R5, R1
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
ADD R3, R1
MRI R5, 0
MMR (R3), R5
MRM R5, (R3)
SUB R3, R1
ADD R2, R1
MRM R6, (R3)
SUB R3, R1
SUB R6, R5
ISZ R6, R6
MMR (R2), R6
MRM R5, (R2)
SUB R2, R1
ISZ R5, R5
JPC R5, If_738_else
MRI R5, gcRunning
MRM R5, (R5)
JPC R5, gc_return_741
MRI R5, gcReturnAddress
MRI R6, gc_return_741
MMR (R5), R6
MRI R5, heapSpace
MRM R5, (R5)
MRI R6, 2
SUB R5, R6
ISN R5, R5
JPC R5, _garbageCollector
gc_return_741:
MRI R5, heapSpace
MRM R5, (R5)
MRI R6, 2
SUB R5, R6
ISN R5, R5
XOR R5, R1
JPC R5, skip_742
MRI R7, _outOfMemory
MRI R5, _error
MRR R0, R5
skip_742:
MRI R5, heapPointer
MRM R6, (R5)
MRI R7, Main
MMR (R6), R7
ADD R3, R1
MMR (R3), R6
MRI R7, 0
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R5), R6
MRI R5, heapSpace
MRI R6, heapSpace
MRM R6, (R6)
MRI R7, 4
SUB R6, R7
MMR (R5), R6
ADD R2, R1
MRR R5, R4
MRI R6, 0
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R6, (R3)
SUB R3, R1
MMR (R5), R6
ADD R2, R1
MRR R5, R4
MRI R6, 0
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
ADD R2, R1
MRR R5, R4
MRI R6, -1
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
MRM R5, (R3)
JPC R5, skip_743
MRI R7, _nullPointer
MRI R5, _error
MRR R0, R5
skip_743:
ADD R2, R1
MRM R5, (R3)
SUB R3, R1
ADD R5, R1
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R6, (R3)
SUB R3, R1
MMR (R5), R6
MRI R5, If_739_endIf
MRR R0, R5
If_738_else:
If_739_endIf:
ADD R2, R1
MRR R5, R4
MRI R6, -1
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
MRM R5, (R3)
JPC R5, skip_744
MRI R7, _nullPointer
MRI R5, _error
MRR R0, R5
skip_744:
ADD R2, R1
MRM R5, (R3)
SUB R3, R1
ADD R5, R1
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
MRM R5, (R3)
MRI R6, 2
SUB R3, R6
MMR (R3), R5
MRM R4, (R2)
SUB R2, R1
MRM R6, (R2)
SUB R2, R1
MRR R0, R6
Main_main:
ADD R2, R1
MMR (R2), R4
MRR R4, R3
ADD R4, R1
ADD R2, R1
MRR R5, R4
MRI R6, -1
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
MRM R5, (R3)
JPC R5, skip_745
MRI R7, _nullPointer
MRI R5, _error
MRR R0, R5
skip_745:
ADD R2, R1
MRI R5, 83
MMR (R2), R5
MRI R5, gcRunning
MRM R5, (R5)
JPC R5, gc_return_746
MRI R5, gcReturnAddress
MRI R6, gc_return_746
MMR (R5), R6
MRI R5, heapSpace
MRM R5, (R5)
MRI R6, 3
SUB R5, R6
ISN R5, R5
JPC R5, _garbageCollector
gc_return_746:
MRI R5, heapSpace
MRM R5, (R5)
MRI R6, 3
SUB R5, R6
ISN R5, R5
XOR R5, R1
JPC R5, skip_747
MRI R7, _outOfMemory
MRI R5, _error
MRR R0, R5
skip_747:
MRI R5, heapPointer
MRM R6, (R5)
MRI R7, Integer
MMR (R6), R7
ADD R3, R1
MMR (R3), R6
MRI R7, 0
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R5), R6
MRI R5, heapSpace
MRI R6, heapSpace
MRM R6, (R6)
MRI R7, 5
SUB R6, R7
MMR (R5), R6
MRM R5, (R3)
ADD R5, R1
ADD R5, R1
MRM R6, (R2)
SUB R2, R1
MMR (R5), R6
ADD R2, R1
MRI R5, VarOrCall_5_8_return
MMR (R2), R5
MRR R5, R3
SUB R5, R1
MRM R5, (R5)
MRM R5, (R5)
MRI R6, 2
ADD R5, R6
MRM R5, (R5)
MRR R0, R5
VarOrCall_5_8_return:
ADD R2, R1
MRM R5, (R3)
SUB R3, R1
MRI R6, 2
ADD R5, R6
MRM R5, (R5)
MMR (R2), R5
MRM R5, (R2)
ISZ R5, R5
JPC R5, Binary_5_19_skip
SUB R2, R1
ADD R2, R1
MRI R5, 0
MMR (R2), R5
MRM R5, (R2)
ISZ R5, R5
JPC R5, Binary_5_34_skip
SUB R2, R1
ADD R2, R1
MRR R5, R4
MRI R6, -1
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
MRM R5, (R3)
JPC R5, skip_748
MRI R7, _nullPointer
MRI R5, _error
MRR R0, R5
skip_748:
ADD R2, R1
MRI R5, 88
MMR (R2), R5
MRI R5, gcRunning
MRM R5, (R5)
JPC R5, gc_return_749
MRI R5, gcReturnAddress
MRI R6, gc_return_749
MMR (R5), R6
MRI R5, heapSpace
MRM R5, (R5)
MRI R6, 3
SUB R5, R6
ISN R5, R5
JPC R5, _garbageCollector
gc_return_749:
MRI R5, heapSpace
MRM R5, (R5)
MRI R6, 3
SUB R5, R6
ISN R5, R5
XOR R5, R1
JPC R5, skip_750
MRI R7, _outOfMemory
MRI R5, _error
MRR R0, R5
skip_750:
MRI R5, heapPointer
MRM R6, (R5)
MRI R7, Integer
MMR (R6), R7
ADD R3, R1
MMR (R3), R6
MRI R7, 0
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R5), R6
MRI R5, heapSpace
MRI R6, heapSpace
MRM R6, (R6)
MRI R7, 5
SUB R6, R7
MMR (R5), R6
MRM R5, (R3)
ADD R5, R1
ADD R5, R1
MRM R6, (R2)
SUB R2, R1
MMR (R5), R6
ADD R2, R1
MRI R5, VarOrCall_5_39_return
MMR (R2), R5
MRR R5, R3
SUB R5, R1
MRM R5, (R5)
MRM R5, (R5)
MRI R6, 2
ADD R5, R6
MRM R5, (R5)
MRR R0, R5
VarOrCall_5_39_return:
ADD R2, R1
MRM R5, (R3)
SUB R3, R1
MRI R6, 2
ADD R5, R6
MRM R5, (R5)
MMR (R2), R5
Binary_5_34_skip:
Binary_5_19_skip:
MRM R5, (R2)
SUB R2, R1
ISZ R5, R5
JPC R5, If_5_5_else
ADD R2, R1
MRI R5, 88
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
SYS 1, 5
MRI R5, If_5_5_endIf
MRR R0, R5
If_5_5_else:
If_5_5_endIf:
ADD R2, R1
MRR R5, R4
MRI R6, -1
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
MRM R5, (R3)
JPC R5, skip_751
MRI R7, _nullPointer
MRI R5, _error
MRR R0, R5
skip_751:
ADD R2, R1
MRI R5, 104
MMR (R2), R5
MRI R5, gcRunning
MRM R5, (R5)
JPC R5, gc_return_752
MRI R5, gcReturnAddress
MRI R6, gc_return_752
MMR (R5), R6
MRI R5, heapSpace
MRM R5, (R5)
MRI R6, 3
SUB R5, R6
ISN R5, R5
JPC R5, _garbageCollector
gc_return_752:
MRI R5, heapSpace
MRM R5, (R5)
MRI R6, 3
SUB R5, R6
ISN R5, R5
XOR R5, R1
JPC R5, skip_753
MRI R7, _outOfMemory
MRI R5, _error
MRR R0, R5
skip_753:
MRI R5, heapPointer
MRM R6, (R5)
MRI R7, Integer
MMR (R6), R7
ADD R3, R1
MMR (R3), R6
MRI R7, 0
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R5), R6
MRI R5, heapSpace
MRI R6, heapSpace
MRM R6, (R6)
MRI R7, 5
SUB R6, R7
MMR (R5), R6
MRM R5, (R3)
ADD R5, R1
ADD R5, R1
MRM R6, (R2)
SUB R2, R1
MMR (R5), R6
ADD R2, R1
MRI R5, VarOrCall_8_8_return
MMR (R2), R5
MRR R5, R3
SUB R5, R1
MRM R5, (R5)
MRM R5, (R5)
MRI R6, 2
ADD R5, R6
MRM R5, (R5)
MRR R0, R5
VarOrCall_8_8_return:
ADD R2, R1
MRM R5, (R3)
SUB R3, R1
MRI R6, 2
ADD R5, R6
MRM R5, (R5)
MMR (R2), R5
MRM R5, (R2)
JPC R5, Binary_8_18_skip
SUB R2, R1
ADD R2, R1
MRR R5, R4
MRI R6, -1
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
MRM R5, (R3)
JPC R5, skip_754
MRI R7, _nullPointer
MRI R5, _error
MRR R0, R5
skip_754:
ADD R2, R1
MRI R5, 88
MMR (R2), R5
MRI R5, gcRunning
MRM R5, (R5)
JPC R5, gc_return_755
MRI R5, gcReturnAddress
MRI R6, gc_return_755
MMR (R5), R6
MRI R5, heapSpace
MRM R5, (R5)
MRI R6, 3
SUB R5, R6
ISN R5, R5
JPC R5, _garbageCollector
gc_return_755:
MRI R5, heapSpace
MRM R5, (R5)
MRI R6, 3
SUB R5, R6
ISN R5, R5
XOR R5, R1
JPC R5, skip_756
MRI R7, _outOfMemory
MRI R5, _error
MRR R0, R5
skip_756:
MRI R5, heapPointer
MRM R6, (R5)
MRI R7, Integer
MMR (R6), R7
ADD R3, R1
MMR (R3), R6
MRI R7, 0
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R5), R6
MRI R5, heapSpace
MRI R6, heapSpace
MRM R6, (R6)
MRI R7, 5
SUB R6, R7
MMR (R5), R6
MRM R5, (R3)
ADD R5, R1
ADD R5, R1
MRM R6, (R2)
SUB R2, R1
MMR (R5), R6
ADD R2, R1
MRI R5, VarOrCall_8_23_return
MMR (R2), R5
MRR R5, R3
SUB R5, R1
MRM R5, (R5)
MRM R5, (R5)
MRI R6, 2
ADD R5, R6
MRM R5, (R5)
MRR R0, R5
VarOrCall_8_23_return:
ADD R2, R1
MRM R5, (R3)
SUB R3, R1
MRI R6, 2
ADD R5, R6
MRM R5, (R5)
MMR (R2), R5
Binary_8_18_skip:
MRM R5, (R2)
SUB R2, R1
ISZ R5, R5
JPC R5, If_8_5_else
ADD R2, R1
MRI R5, 111
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
SYS 1, 5
MRI R5, If_8_5_endIf
MRR R0, R5
If_8_5_else:
If_8_5_endIf:
ADD R2, R1
MRR R5, R4
MRI R6, -1
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
MRM R5, (R3)
JPC R5, skip_757
MRI R7, _nullPointer
MRI R5, _error
MRR R0, R5
skip_757:
ADD R2, R1
MRI R5, 114
MMR (R2), R5
MRI R5, gcRunning
MRM R5, (R5)
JPC R5, gc_return_758
MRI R5, gcReturnAddress
MRI R6, gc_return_758
MMR (R5), R6
MRI R5, heapSpace
MRM R5, (R5)
MRI R6, 3
SUB R5, R6
ISN R5, R5
JPC R5, _garbageCollector
gc_return_758:
MRI R5, heapSpace
MRM R5, (R5)
MRI R6, 3
SUB R5, R6
ISN R5, R5
XOR R5, R1
JPC R5, skip_759
MRI R7, _outOfMemory
MRI R5, _error
MRR R0, R5
skip_759:
MRI R5, heapPointer
MRM R6, (R5)
MRI R7, Integer
MMR (R6), R7
ADD R3, R1
MMR (R3), R6
MRI R7, 0
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R5), R6
MRI R5, heapSpace
MRI R6, heapSpace
MRM R6, (R6)
MRI R7, 5
SUB R6, R7
MMR (R5), R6
MRM R5, (R3)
ADD R5, R1
ADD R5, R1
MRM R6, (R2)
SUB R2, R1
MMR (R5), R6
ADD R2, R1
MRI R5, VarOrCall_11_12_return
MMR (R2), R5
MRR R5, R3
SUB R5, R1
MRM R5, (R5)
MRM R5, (R5)
MRI R6, 2
ADD R5, R6
MRM R5, (R5)
MRR R0, R5
VarOrCall_11_12_return:
ADD R2, R1
MRM R5, (R3)
SUB R3, R1
MRI R6, 2
ADD R5, R6
MRM R5, (R5)
MMR (R2), R5
MRM R5, (R2)
ISZ R5, R5
MMR (R2), R5
MRM R5, (R2)
JPC R5, Binary_11_22_skip
SUB R2, R1
ADD R2, R1
MRR R5, R4
MRI R6, -1
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
MRM R5, (R3)
JPC R5, skip_760
MRI R7, _nullPointer
MRI R5, _error
MRR R0, R5
skip_760:
ADD R2, R1
MRI R5, 116
MMR (R2), R5
MRI R5, gcRunning
MRM R5, (R5)
JPC R5, gc_return_761
MRI R5, gcReturnAddress
MRI R6, gc_return_761
MMR (R5), R6
MRI R5, heapSpace
MRM R5, (R5)
MRI R6, 3
SUB R5, R6
ISN R5, R5
JPC R5, _garbageCollector
gc_return_761:
MRI R5, heapSpace
MRM R5, (R5)
MRI R6, 3
SUB R5, R6
ISN R5, R5
XOR R5, R1
JPC R5, skip_762
MRI R7, _outOfMemory
MRI R5, _error
MRR R0, R5
skip_762:
MRI R5, heapPointer
MRM R6, (R5)
MRI R7, Integer
MMR (R6), R7
ADD R3, R1
MMR (R3), R6
MRI R7, 0
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R5), R6
MRI R5, heapSpace
MRI R6, heapSpace
MRM R6, (R6)
MRI R7, 5
SUB R6, R7
MMR (R5), R6
MRM R5, (R3)
ADD R5, R1
ADD R5, R1
MRM R6, (R2)
SUB R2, R1
MMR (R5), R6
ADD R2, R1
MRI R5, VarOrCall_11_31_return
MMR (R2), R5
MRR R5, R3
SUB R5, R1
MRM R5, (R5)
MRM R5, (R5)
MRI R6, 2
ADD R5, R6
MRM R5, (R5)
MRR R0, R5
VarOrCall_11_31_return:
ADD R2, R1
MRM R5, (R3)
SUB R3, R1
MRI R6, 2
ADD R5, R6
MRM R5, (R5)
MMR (R2), R5
MRM R5, (R2)
ISZ R5, R5
MMR (R2), R5
Binary_11_22_skip:
MRM R5, (R2)
SUB R2, R1
ISZ R5, R5
JPC R5, If_11_5_else
ADD R2, R1
MRI R5, 88
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
SYS 1, 5
MRI R5, If_11_5_endIf
MRR R0, R5
If_11_5_else:
If_11_5_endIf:
ADD R2, R1
MRR R5, R4
MRI R6, -1
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
MRM R5, (R3)
JPC R5, skip_763
MRI R7, _nullPointer
MRI R5, _error
MRR R0, R5
skip_763:
ADD R2, R1
MRI R5, 99
MMR (R2), R5
MRI R5, gcRunning
MRM R5, (R5)
JPC R5, gc_return_764
MRI R5, gcReturnAddress
MRI R6, gc_return_764
MMR (R5), R6
MRI R5, heapSpace
MRM R5, (R5)
MRI R6, 3
SUB R5, R6
ISN R5, R5
JPC R5, _garbageCollector
gc_return_764:
MRI R5, heapSpace
MRM R5, (R5)
MRI R6, 3
SUB R5, R6
ISN R5, R5
XOR R5, R1
JPC R5, skip_765
MRI R7, _outOfMemory
MRI R5, _error
MRR R0, R5
skip_765:
MRI R5, heapPointer
MRM R6, (R5)
MRI R7, Integer
MMR (R6), R7
ADD R3, R1
MMR (R3), R6
MRI R7, 0
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R5), R6
MRI R5, heapSpace
MRI R6, heapSpace
MRM R6, (R6)
MRI R7, 5
SUB R6, R7
MMR (R5), R6
MRM R5, (R3)
ADD R5, R1
ADD R5, R1
MRM R6, (R2)
SUB R2, R1
MMR (R5), R6
ADD R2, R1
MRI R5, VarOrCall_14_8_return
MMR (R2), R5
MRR R5, R3
SUB R5, R1
MRM R5, (R5)
MRM R5, (R5)
MRI R6, 2
ADD R5, R6
MRM R5, (R5)
MRR R0, R5
VarOrCall_14_8_return:
ADD R2, R1
MRM R5, (R3)
SUB R3, R1
MRI R6, 2
ADD R5, R6
MRM R5, (R5)
MMR (R2), R5
MRM R5, (R2)
ISZ R5, R5
JPC R5, Binary_14_19_skip
SUB R2, R1
ADD R2, R1
MRR R5, R4
MRI R6, -1
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
MRM R5, (R3)
JPC R5, skip_766
MRI R7, _nullPointer
MRI R5, _error
MRR R0, R5
skip_766:
ADD R2, R1
MRI R5, 117
MMR (R2), R5
MRI R5, gcRunning
MRM R5, (R5)
JPC R5, gc_return_767
MRI R5, gcReturnAddress
MRI R6, gc_return_767
MMR (R5), R6
MRI R5, heapSpace
MRM R5, (R5)
MRI R6, 3
SUB R5, R6
ISN R5, R5
JPC R5, _garbageCollector
gc_return_767:
MRI R5, heapSpace
MRM R5, (R5)
MRI R6, 3
SUB R5, R6
ISN R5, R5
XOR R5, R1
JPC R5, skip_768
MRI R7, _outOfMemory
MRI R5, _error
MRR R0, R5
skip_768:
MRI R5, heapPointer
MRM R6, (R5)
MRI R7, Integer
MMR (R6), R7
ADD R3, R1
MMR (R3), R6
MRI R7, 0
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R5), R6
MRI R5, heapSpace
MRI R6, heapSpace
MRM R6, (R6)
MRI R7, 5
SUB R6, R7
MMR (R5), R6
MRM R5, (R3)
ADD R5, R1
ADD R5, R1
MRM R6, (R2)
SUB R2, R1
MMR (R5), R6
ADD R2, R1
MRI R5, VarOrCall_14_24_return
MMR (R2), R5
MRR R5, R3
SUB R5, R1
MRM R5, (R5)
MRM R5, (R5)
MRI R6, 2
ADD R5, R6
MRM R5, (R5)
MRR R0, R5
VarOrCall_14_24_return:
ADD R2, R1
MRM R5, (R3)
SUB R3, R1
MRI R6, 2
ADD R5, R6
MRM R5, (R5)
MMR (R2), R5
ADD R2, R1
MRR R5, R4
MRI R6, -1
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
MRM R5, (R3)
JPC R5, skip_769
MRI R7, _nullPointer
MRI R5, _error
MRR R0, R5
skip_769:
ADD R2, R1
MRI R5, 116
MMR (R2), R5
MRI R5, gcRunning
MRM R5, (R5)
JPC R5, gc_return_770
MRI R5, gcReturnAddress
MRI R6, gc_return_770
MMR (R5), R6
MRI R5, heapSpace
MRM R5, (R5)
MRI R6, 3
SUB R5, R6
ISN R5, R5
JPC R5, _garbageCollector
gc_return_770:
MRI R5, heapSpace
MRM R5, (R5)
MRI R6, 3
SUB R5, R6
ISN R5, R5
XOR R5, R1
JPC R5, skip_771
MRI R7, _outOfMemory
MRI R5, _error
MRR R0, R5
skip_771:
MRI R5, heapPointer
MRM R6, (R5)
MRI R7, Integer
MMR (R6), R7
ADD R3, R1
MMR (R3), R6
MRI R7, 0
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R5), R6
MRI R5, heapSpace
MRI R6, heapSpace
MRM R6, (R6)
MRI R7, 5
SUB R6, R7
MMR (R5), R6
MRM R5, (R3)
ADD R5, R1
ADD R5, R1
MRM R6, (R2)
SUB R2, R1
MMR (R5), R6
ADD R2, R1
MRI R5, VarOrCall_14_35_return
MMR (R2), R5
MRR R5, R3
SUB R5, R1
MRM R5, (R5)
MRM R5, (R5)
MRI R6, 2
ADD R5, R6
MRM R5, (R5)
MRR R0, R5
VarOrCall_14_35_return:
ADD R2, R1
MRM R5, (R3)
SUB R3, R1
MRI R6, 2
ADD R5, R6
MRM R5, (R5)
MMR (R2), R5
MRM R6, (R2)
SUB R2, R1
MRM R5, (R2)
AND R5, R6
MMR (R2), R5
Binary_14_19_skip:
MRM R5, (R2)
SUB R2, R1
ISZ R5, R5
JPC R5, If_14_5_else
ADD R2, R1
MRI R5, 33
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
SYS 1, 5
MRI R5, If_14_5_endIf
MRR R0, R5
If_14_5_else:
If_14_5_endIf:
ADD R2, R1
MRI R5, 0
MMR (R2), R5
MRM R5, (R2)
ISZ R5, R5
JPC R5, Binary_17_18_skip
SUB R2, R1
ADD R2, R1
MRR R5, R4
MRI R6, -1
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
MRM R5, (R3)
JPC R5, skip_772
MRI R7, _nullPointer
MRI R5, _error
MRR R0, R5
skip_772:
ADD R2, R1
MRI R5, 88
MMR (R2), R5
MRI R5, gcRunning
MRM R5, (R5)
JPC R5, gc_return_773
MRI R5, gcReturnAddress
MRI R6, gc_return_773
MMR (R5), R6
MRI R5, heapSpace
MRM R5, (R5)
MRI R6, 3
SUB R5, R6
ISN R5, R5
JPC R5, _garbageCollector
gc_return_773:
MRI R5, heapSpace
MRM R5, (R5)
MRI R6, 3
SUB R5, R6
ISN R5, R5
XOR R5, R1
JPC R5, skip_774
MRI R7, _outOfMemory
MRI R5, _error
MRR R0, R5
skip_774:
MRI R5, heapPointer
MRM R6, (R5)
MRI R7, Integer
MMR (R6), R7
ADD R3, R1
MMR (R3), R6
MRI R7, 0
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R5), R6
MRI R5, heapSpace
MRI R6, heapSpace
MRM R6, (R6)
MRI R7, 5
SUB R6, R7
MMR (R5), R6
MRM R5, (R3)
ADD R5, R1
ADD R5, R1
MRM R6, (R2)
SUB R2, R1
MMR (R5), R6
ADD R2, R1
MRI R5, VarOrCall_17_24_return
MMR (R2), R5
MRR R5, R3
SUB R5, R1
MRM R5, (R5)
MRM R5, (R5)
MRI R6, 2
ADD R5, R6
MRM R5, (R5)
MRR R0, R5
VarOrCall_17_24_return:
ADD R2, R1
MRM R5, (R3)
SUB R3, R1
MRI R6, 2
ADD R5, R6
MRM R5, (R5)
MMR (R2), R5
ADD R2, R1
MRR R5, R4
MRI R6, -1
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
MRM R5, (R3)
JPC R5, skip_775
MRI R7, _nullPointer
MRI R5, _error
MRR R0, R5
skip_775:
ADD R2, R1
MRI R5, 88
MMR (R2), R5
MRI R5, gcRunning
MRM R5, (R5)
JPC R5, gc_return_776
MRI R5, gcReturnAddress
MRI R6, gc_return_776
MMR (R5), R6
MRI R5, heapSpace
MRM R5, (R5)
MRI R6, 3
SUB R5, R6
ISN R5, R5
JPC R5, _garbageCollector
gc_return_776:
MRI R5, heapSpace
MRM R5, (R5)
MRI R6, 3
SUB R5, R6
ISN R5, R5
XOR R5, R1
JPC R5, skip_777
MRI R7, _outOfMemory
MRI R5, _error
MRR R0, R5
skip_777:
MRI R5, heapPointer
MRM R6, (R5)
MRI R7, Integer
MMR (R6), R7
ADD R3, R1
MMR (R3), R6
MRI R7, 0
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R5), R6
MRI R5, heapSpace
MRI R6, heapSpace
MRM R6, (R6)
MRI R7, 5
SUB R6, R7
MMR (R5), R6
MRM R5, (R3)
ADD R5, R1
ADD R5, R1
MRM R6, (R2)
SUB R2, R1
MMR (R5), R6
ADD R2, R1
MRI R5, VarOrCall_17_34_return
MMR (R2), R5
MRR R5, R3
SUB R5, R1
MRM R5, (R5)
MRM R5, (R5)
MRI R6, 2
ADD R5, R6
MRM R5, (R5)
MRR R0, R5
VarOrCall_17_34_return:
ADD R2, R1
MRM R5, (R3)
SUB R3, R1
MRI R6, 2
ADD R5, R6
MRM R5, (R5)
MMR (R2), R5
MRM R6, (R2)
SUB R2, R1
MRM R5, (R2)
OR R5, R6
MMR (R2), R5
Binary_17_18_skip:
MRM R5, (R2)
SUB R2, R1
ISZ R5, R5
JPC R5, If_17_5_else
ADD R2, R1
MRI R5, 88
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
SYS 1, 5
MRI R5, If_17_5_endIf
MRR R0, R5
If_17_5_else:
If_17_5_endIf:
SUB R3, R1
MRM R4, (R2)
SUB R2, R1
MRM R5, (R2)
SUB R2, R1
MRR R0, R5
Main_a:
ADD R2, R1
MMR (R2), R4
MRR R4, R3
ADD R4, R1
ADD R2, R1
MRR R5, R4
MRI R6, -1
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
ADD R2, R1
MRM R5, (R3)
SUB R3, R1
MRI R6, 2
ADD R5, R6
MRM R5, (R5)
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
SYS 1, 5
ADD R2, R1
MMR (R2), R1
MRI R5, gcRunning
MRM R5, (R5)
JPC R5, gc_return_778
MRI R5, gcReturnAddress
MRI R6, gc_return_778
MMR (R5), R6
MRI R5, heapSpace
MRM R5, (R5)
MRI R6, 3
SUB R5, R6
ISN R5, R5
JPC R5, _garbageCollector
gc_return_778:
MRI R5, heapSpace
MRM R5, (R5)
MRI R6, 3
SUB R5, R6
ISN R5, R5
XOR R5, R1
JPC R5, skip_779
MRI R7, _outOfMemory
MRI R5, _error
MRR R0, R5
skip_779:
MRI R5, heapPointer
MRM R6, (R5)
MRI R7, Boolean
MMR (R6), R7
ADD R3, R1
MMR (R3), R6
MRI R7, 0
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R5), R6
MRI R5, heapSpace
MRI R6, heapSpace
MRM R6, (R6)
MRI R7, 5
SUB R6, R7
MMR (R5), R6
MRM R5, (R3)
ADD R5, R1
ADD R5, R1
MRM R6, (R2)
SUB R2, R1
MMR (R5), R6
MRM R5, (R3)
MRI R6, 2
SUB R3, R6
MMR (R3), R5
MRM R4, (R2)
SUB R2, R1
MRM R6, (R2)
SUB R2, R1
MRR R0, R6
Object:
DAT 1, Object__clone
Object__clone:
ADD R2, R1
MMR (R2), R4
MRR R4, R3
ADD R4, R1
MRI R5, 0
ADD R3, R1
MMR (R3), R5
ADD R2, R1
MRR R5, R4
MRI R6, -1
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
MRM R5, (R3)
JPC R5, skip_782
MRI R7, _nullPointer
MRI R5, _error
MRR R0, R5
skip_782:
ADD R2, R1
MRM R5, (R3)
SUB R3, R1
ADD R5, R1
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
ADD R3, R1
MRI R5, 0
MMR (R3), R5
MRM R5, (R3)
SUB R3, R1
ADD R2, R1
MRM R6, (R3)
SUB R3, R1
SUB R6, R5
ISZ R6, R6
MMR (R2), R6
MRM R5, (R2)
SUB R2, R1
ISZ R5, R5
JPC R5, If_780_else
MRI R5, gcRunning
MRM R5, (R5)
JPC R5, gc_return_783
MRI R5, gcReturnAddress
MRI R6, gc_return_783
MMR (R5), R6
MRI R5, heapSpace
MRM R5, (R5)
MRI R6, 2
SUB R5, R6
ISN R5, R5
JPC R5, _garbageCollector
gc_return_783:
MRI R5, heapSpace
MRM R5, (R5)
MRI R6, 2
SUB R5, R6
ISN R5, R5
XOR R5, R1
JPC R5, skip_784
MRI R7, _outOfMemory
MRI R5, _error
MRR R0, R5
skip_784:
MRI R5, heapPointer
MRM R6, (R5)
MRI R7, Object
MMR (R6), R7
ADD R3, R1
MMR (R3), R6
MRI R7, 0
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R5), R6
MRI R5, heapSpace
MRI R6, heapSpace
MRM R6, (R6)
MRI R7, 4
SUB R6, R7
MMR (R5), R6
ADD R2, R1
MRR R5, R4
MRI R6, 0
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R6, (R3)
SUB R3, R1
MMR (R5), R6
ADD R2, R1
MRR R5, R4
MRI R6, 0
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
ADD R2, R1
MRR R5, R4
MRI R6, -1
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
MRM R5, (R3)
JPC R5, skip_785
MRI R7, _nullPointer
MRI R5, _error
MRR R0, R5
skip_785:
ADD R2, R1
MRM R5, (R3)
SUB R3, R1
ADD R5, R1
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R6, (R3)
SUB R3, R1
MMR (R5), R6
MRI R5, If_781_endIf
MRR R0, R5
If_780_else:
If_781_endIf:
ADD R2, R1
MRR R5, R4
MRI R6, -1
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
MRM R5, (R3)
JPC R5, skip_786
MRI R7, _nullPointer
MRI R5, _error
MRR R0, R5
skip_786:
ADD R2, R1
MRM R5, (R3)
SUB R3, R1
ADD R5, R1
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
MRM R5, (R3)
MRI R6, 2
SUB R3, R6
MMR (R3), R5
MRM R4, (R2)
SUB R2, R1
MRM R6, (R2)
SUB R2, R1
MRR R0, R6
Boolean:
DAT 1, Boolean__clone
Boolean__clone:
ADD R2, R1
MMR (R2), R4
MRR R4, R3
ADD R4, R1
MRI R5, 0
ADD R3, R1
MMR (R3), R5
ADD R2, R1
MRR R5, R4
MRI R6, -1
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
MRM R5, (R3)
JPC R5, skip_789
MRI R7, _nullPointer
MRI R5, _error
MRR R0, R5
skip_789:
ADD R2, R1
MRM R5, (R3)
SUB R3, R1
ADD R5, R1
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
ADD R3, R1
MRI R5, 0
MMR (R3), R5
MRM R5, (R3)
SUB R3, R1
ADD R2, R1
MRM R6, (R3)
SUB R3, R1
SUB R6, R5
ISZ R6, R6
MMR (R2), R6
MRM R5, (R2)
SUB R2, R1
ISZ R5, R5
JPC R5, If_787_else
MRI R5, gcRunning
MRM R5, (R5)
JPC R5, gc_return_790
MRI R5, gcReturnAddress
MRI R6, gc_return_790
MMR (R5), R6
MRI R5, heapSpace
MRM R5, (R5)
MRI R6, 3
SUB R5, R6
ISN R5, R5
JPC R5, _garbageCollector
gc_return_790:
MRI R5, heapSpace
MRM R5, (R5)
MRI R6, 3
SUB R5, R6
ISN R5, R5
XOR R5, R1
JPC R5, skip_791
MRI R7, _outOfMemory
MRI R5, _error
MRR R0, R5
skip_791:
MRI R5, heapPointer
MRM R6, (R5)
MRI R7, Boolean
MMR (R6), R7
ADD R3, R1
MMR (R3), R6
MRI R7, 0
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R5), R6
MRI R5, heapSpace
MRI R6, heapSpace
MRM R6, (R6)
MRI R7, 5
SUB R6, R7
MMR (R5), R6
ADD R2, R1
MRR R5, R4
MRI R6, 0
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R6, (R3)
SUB R3, R1
MMR (R5), R6
ADD R2, R1
MRR R5, R4
MRI R6, -1
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
MRM R5, (R3)
JPC R5, skip_792
MRI R7, _nullPointer
MRI R5, _error
MRR R0, R5
skip_792:
ADD R2, R1
MRM R5, (R3)
SUB R3, R1
MRI R6, 2
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
ADD R2, R1
MRR R5, R4
MRI R6, 0
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
MRM R5, (R3)
JPC R5, skip_793
MRI R7, _nullPointer
MRI R5, _error
MRR R0, R5
skip_793:
ADD R2, R1
MRM R5, (R3)
SUB R3, R1
MRI R6, 2
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R6, (R3)
SUB R3, R1
MMR (R5), R6
ADD R2, R1
MRR R5, R4
MRI R6, 0
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
ADD R2, R1
MRR R5, R4
MRI R6, -1
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
MRM R5, (R3)
JPC R5, skip_794
MRI R7, _nullPointer
MRI R5, _error
MRR R0, R5
skip_794:
ADD R2, R1
MRM R5, (R3)
SUB R3, R1
ADD R5, R1
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R6, (R3)
SUB R3, R1
MMR (R5), R6
MRI R5, If_788_endIf
MRR R0, R5
If_787_else:
If_788_endIf:
ADD R2, R1
MRR R5, R4
MRI R6, -1
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
MRM R5, (R3)
JPC R5, skip_795
MRI R7, _nullPointer
MRI R5, _error
MRR R0, R5
skip_795:
ADD R2, R1
MRM R5, (R3)
SUB R3, R1
ADD R5, R1
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
MRM R5, (R3)
MRI R6, 2
SUB R3, R6
MMR (R3), R5
MRM R4, (R2)
SUB R2, R1
MRM R6, (R2)
SUB R2, R1
MRR R0, R6
Integer:
DAT 1, Integer__clone
Integer__clone:
ADD R2, R1
MMR (R2), R4
MRR R4, R3
ADD R4, R1
MRI R5, 0
ADD R3, R1
MMR (R3), R5
ADD R2, R1
MRR R5, R4
MRI R6, -1
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
MRM R5, (R3)
JPC R5, skip_798
MRI R7, _nullPointer
MRI R5, _error
MRR R0, R5
skip_798:
ADD R2, R1
MRM R5, (R3)
SUB R3, R1
ADD R5, R1
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
ADD R3, R1
MRI R5, 0
MMR (R3), R5
MRM R5, (R3)
SUB R3, R1
ADD R2, R1
MRM R6, (R3)
SUB R3, R1
SUB R6, R5
ISZ R6, R6
MMR (R2), R6
MRM R5, (R2)
SUB R2, R1
ISZ R5, R5
JPC R5, If_796_else
MRI R5, gcRunning
MRM R5, (R5)
JPC R5, gc_return_799
MRI R5, gcReturnAddress
MRI R6, gc_return_799
MMR (R5), R6
MRI R5, heapSpace
MRM R5, (R5)
MRI R6, 3
SUB R5, R6
ISN R5, R5
JPC R5, _garbageCollector
gc_return_799:
MRI R5, heapSpace
MRM R5, (R5)
MRI R6, 3
SUB R5, R6
ISN R5, R5
XOR R5, R1
JPC R5, skip_800
MRI R7, _outOfMemory
MRI R5, _error
MRR R0, R5
skip_800:
MRI R5, heapPointer
MRM R6, (R5)
MRI R7, Integer
MMR (R6), R7
ADD R3, R1
MMR (R3), R6
MRI R7, 0
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R6), R7
ADD R6, R1
MMR (R5), R6
MRI R5, heapSpace
MRI R6, heapSpace
MRM R6, (R6)
MRI R7, 5
SUB R6, R7
MMR (R5), R6
ADD R2, R1
MRR R5, R4
MRI R6, 0
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R6, (R3)
SUB R3, R1
MMR (R5), R6
ADD R2, R1
MRR R5, R4
MRI R6, -1
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
MRM R5, (R3)
JPC R5, skip_801
MRI R7, _nullPointer
MRI R5, _error
MRR R0, R5
skip_801:
ADD R2, R1
MRM R5, (R3)
SUB R3, R1
MRI R6, 2
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
ADD R2, R1
MRR R5, R4
MRI R6, 0
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
MRM R5, (R3)
JPC R5, skip_802
MRI R7, _nullPointer
MRI R5, _error
MRR R0, R5
skip_802:
ADD R2, R1
MRM R5, (R3)
SUB R3, R1
MRI R6, 2
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R6, (R3)
SUB R3, R1
MMR (R5), R6
ADD R2, R1
MRR R5, R4
MRI R6, 0
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
ADD R2, R1
MRR R5, R4
MRI R6, -1
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
MRM R5, (R3)
JPC R5, skip_803
MRI R7, _nullPointer
MRI R5, _error
MRR R0, R5
skip_803:
ADD R2, R1
MRM R5, (R3)
SUB R3, R1
ADD R5, R1
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R6, (R3)
SUB R3, R1
MMR (R5), R6
MRI R5, If_797_endIf
MRR R0, R5
If_796_else:
If_797_endIf:
ADD R2, R1
MRR R5, R4
MRI R6, -1
ADD R5, R6
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
MRM R5, (R3)
JPC R5, skip_804
MRI R7, _nullPointer
MRI R5, _error
MRR R0, R5
skip_804:
ADD R2, R1
MRM R5, (R3)
SUB R3, R1
ADD R5, R1
MMR (R2), R5
MRM R5, (R2)
SUB R2, R1
MRM R5, (R5)
ADD R3, R1
MMR (R3), R5
MRM R5, (R3)
MRI R6, 2
SUB R3, R6
MMR (R3), R5
MRM R4, (R2)
SUB R2, R1
MRM R6, (R2)
SUB R2, R1
MRR R0, R6
_outOfMemory:
DAT 1, 10
DAT 1, 32
DAT 1, 42
DAT 1, 42
DAT 1, 42
DAT 1, 32
DAT 1, 114
DAT 1, 117
DAT 1, 110
DAT 1, 116
DAT 1, 105
DAT 1, 109
DAT 1, 101
DAT 1, 32
DAT 1, 101
DAT 1, 114
DAT 1, 114
DAT 1, 111
DAT 1, 114
DAT 1, 58
DAT 1, 32
DAT 1, 111
DAT 1, 117
DAT 1, 116
DAT 1, 32
DAT 1, 111
DAT 1, 102
DAT 1, 32
DAT 1, 109
DAT 1, 101
DAT 1, 109
DAT 1, 111
DAT 1, 114
DAT 1, 121
DAT 1, 32
DAT 1, 42
DAT 1, 42
DAT 1, 42
DAT 1, 10
DAT 1, 0
_nullPointer:
DAT 1, 10
DAT 1, 32
DAT 1, 42
DAT 1, 42
DAT 1, 42
DAT 1, 32
DAT 1, 114
DAT 1, 117
DAT 1, 110
DAT 1, 116
DAT 1, 105
DAT 1, 109
DAT 1, 101
DAT 1, 32
DAT 1, 101
DAT 1, 114
DAT 1, 114
DAT 1, 111
DAT 1, 114
DAT 1, 58
DAT 1, 32
DAT 1, 110
DAT 1, 117
DAT 1, 108
DAT 1, 108
DAT 1, 32
DAT 1, 112
DAT 1, 111
DAT 1, 105
DAT 1, 110
DAT 1, 116
DAT 1, 101
DAT 1, 114
DAT 1, 32
DAT 1, 42
DAT 1, 42
DAT 1, 42
DAT 1, 10
DAT 1, 0
_divBy0:
DAT 1, 10
DAT 1, 32
DAT 1, 42
DAT 1, 42
DAT 1, 42
DAT 1, 32
DAT 1, 114
DAT 1, 117
DAT 1, 110
DAT 1, 116
DAT 1, 105
DAT 1, 109
DAT 1, 101
DAT 1, 32
DAT 1, 101
DAT 1, 114
DAT 1, 114
DAT 1, 111
DAT 1, 114
DAT 1, 58
DAT 1, 32
DAT 1, 100
DAT 1, 105
DAT 1, 118
DAT 1, 105
DAT 1, 115
DAT 1, 105
DAT 1, 111
DAT 1, 110
DAT 1, 32
DAT 1, 98
DAT 1, 121
DAT 1, 32
DAT 1, 122
DAT 1, 101
DAT 1, 114
DAT 1, 111
DAT 1, 32
DAT 1, 42
DAT 1, 42
DAT 1, 42
DAT 1, 10
DAT 1, 0
_stackOverflow:
DAT 1, 10
DAT 1, 32
DAT 1, 42
DAT 1, 42
DAT 1, 42
DAT 1, 32
DAT 1, 114
DAT 1, 117
DAT 1, 110
DAT 1, 116
DAT 1, 105
DAT 1, 109
DAT 1, 101
DAT 1, 32
DAT 1, 101
DAT 1, 114
DAT 1, 114
DAT 1, 111
DAT 1, 114
DAT 1, 58
DAT 1, 32
DAT 1, 115
DAT 1, 116
DAT 1, 97
DAT 1, 99
DAT 1, 107
DAT 1, 32
DAT 1, 111
DAT 1, 118
DAT 1, 101
DAT 1, 114
DAT 1, 102
DAT 1, 108
DAT 1, 111
DAT 1, 119
DAT 1, 32
DAT 1, 42
DAT 1, 42
DAT 1, 42
DAT 1, 10
DAT 1, 0
_error:
MRM R6, (R7)
JPC R6, _print
MRI R5, _end
MRR R0, R5
_print:
SYS 1, 6
ADD R7, R1
MRI R5, _error
MRR R0, R5
gcReturnAddress:
DAT 1, 0
gcRunning:
DAT 1, 0
gcBefore:
DAT 1, 0
_garbageCollector:
MRI R5, gcRunning
MMR (R5), R1
MRI R6, currentHeap
MRM R6, (R6)
MRI R5, _heap_1
MUL R5, R6
XOR R6, R1
MRI R7, _heap_2
MUL R7, R6
ADD R5, R7
MRI R7, currentHeap
MMR (R7), R6
MRI R6, heapPointer
MMR (R6), R5
MRI R5, heapSpace
MRI R6, 100
MMR (R5), R6
MRI R5, gcBefore
MMR (R5), R3
_gc_coopynext:
ADD R2, R1
MRM R5, (R3)
SUB R3, R1
MMR (R2), R5
MRR R5, R3
MRI R6, _objectStack
SUB R5, R6
ISZ R5, R5
JPC R5, _gc_clonenext
MRI R5, _gc_coopynext
MRR R0, R5
_gc_clonenext:
MRR R5, R3
MRI R6, gcBefore
MRM R6, (R6)
SUB R5, R6
ISZ R5, R5
JPC R5, _gcexit
ADD R3, R1
MRM R5, (R2)
SUB R2, R1
MMR (R3), R5
MRM R5, (R3)
ISZ R5, R5
JPC R5, _gc_clonenext
ADD R2, R1
MRI R5, VarOrCall_805_return
MMR (R2), R5
MRR R5, R3
MRI R6, 0
SUB R5, R6
MRM R5, (R5)
MRM R5, (R5)
MRI R6, 0
ADD R5, R6
MRM R5, (R5)
MRR R0, R5
VarOrCall_805_return:
MRI R5, _gc_clonenext
MRR R0, R5
_gcexit:
MRI R5, gcRunning
MRI R6, 0
MMR (R5), R6
MRI R5, gcReturnAddress
MRM R5, (R5)
MRR R0, R5
_stack:
DAT 50, 0
_stack_end:
_objectStack:
DAT 50, 0
_objectStack_end:
currentHeap:
DAT 1, 1
heapPointer:
DAT 1, _heap_2
heapSpace:
DAT 1, 100
_heap_1:
DAT 100, 0
_heap_2:
DAT 100, 0
_end:
